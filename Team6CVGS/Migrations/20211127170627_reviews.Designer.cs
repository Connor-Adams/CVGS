// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Team6CVGS.Models;

namespace Team6CVGS.Migrations
{
    [DbContext(typeof(CVGSContext))]
    [Migration("20211127170627_reviews")]
    partial class reviews
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AI")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Team6CVGS.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Team6CVGS.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Team6CVGS.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Team6CVGS.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Team6CVGS.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Team6CVGS.Models.AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Team6CVGS.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Team6CVGS.Models.Country", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength(true);

                    b.Property<string>("Alpha2Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FrenchName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Code")
                        .HasName("Country_PK");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Team6CVGS.Models.CreditCard", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(15)
                        .HasColumnType("nchar(15)")
                        .IsFixedLength(true);

                    b.Property<byte>("CardNumberLength")
                        .HasColumnType("tinyint");

                    b.Property<string>("CardNumberPrefixList")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .IsFixedLength(true);

                    b.Property<string>("FrenchName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .IsFixedLength(true);

                    b.HasKey("Code")
                        .HasName("CreditCard_PK");

                    b.ToTable("CreditCard");
                });

            modelBuilder.Entity("Team6CVGS.Models.Department", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FrenchName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Code")
                        .HasName("Department_PK");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("Team6CVGS.Models.Employee", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<string>("Gln")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength(true);

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("PayCategoryCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength(true);

                    b.Property<string>("PositionCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasDefaultValueSql("('Unknown')");

                    b.HasKey("PersonId")
                        .HasName("Employee_PK");

                    b.HasIndex("DepartmentCode");

                    b.HasIndex("Gln");

                    b.HasIndex("PayCategoryCode");

                    b.HasIndex("PositionCode");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Team6CVGS.Models.EmployeePayCategory", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength(true);

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FrenchName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Code")
                        .HasName("EmployeePayCategory_PK");

                    b.ToTable("EmployeePayCategory");
                });

            modelBuilder.Entity("Team6CVGS.Models.EmployeePosition", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength(true);

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FrenchName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Code")
                        .HasName("EmployeePosition_PK");

                    b.ToTable("EmployeePosition");
                });

            modelBuilder.Entity("Team6CVGS.Models.EsrbContentDescriptor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnglishDescriptor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FrenchDescriptor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EsrbContentDescriptor");
                });

            modelBuilder.Entity("Team6CVGS.Models.EsrbRating", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .HasColumnType("nchar(5)")
                        .IsFixedLength(true);

                    b.Property<string>("EnglishRating")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FrenchRating")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Code")
                        .HasName("EsrbRatingCode_PK");

                    b.ToTable("EsrbRating");
                });

            modelBuilder.Entity("Team6CVGS.Models.EventLog", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Category")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .HasDefaultValueSql("('INFORMATION')")
                        .IsFixedLength(true);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Detail")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Event")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("Guid")
                        .HasName("EventLog_PK")
                        .IsClustered(false);

                    b.HasIndex(new[] { "Date" }, "EventLog_Date_IX")
                        .IsClustered();

                    b.ToTable("EventLog");
                });

            modelBuilder.Entity("Team6CVGS.Models.Game", b =>
                {
                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EnglishDescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("EnglishDetail")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("EnglishPlayerCount")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("EnglishTrailer")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("EsrbRatingCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nchar(5)")
                        .IsFixedLength(true);

                    b.Property<string>("FrenchDescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("FrenchDetail")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("FrenchName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("FrenchPlayerCount")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FrenchTrailer")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("FrenchVersion")
                        .HasColumnType("bit");

                    b.Property<int>("GameCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("GamePerspectiveCode")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<string>("GameStatusCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<int?>("GameSubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasDefaultValueSql("('Unknown')");

                    b.HasKey("Guid")
                        .HasName("Game_PK");

                    b.HasIndex("EsrbRatingCode");

                    b.HasIndex("GameCategoryId");

                    b.HasIndex("GamePerspectiveCode");

                    b.HasIndex("GameStatusCode");

                    b.HasIndex("GameSubCategoryId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("Team6CVGS.Models.GameCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnglishCategory")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FrenchCategory")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("GameCategory");
                });

            modelBuilder.Entity("Team6CVGS.Models.GameCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FrenchName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("GameCompany");
                });

            modelBuilder.Entity("Team6CVGS.Models.GameEsrbContentDescriptor", b =>
                {
                    b.Property<Guid>("GameGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EsrbContentDescriptorId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasDefaultValueSql("('Unknown')");

                    b.HasKey("GameGuid", "EsrbContentDescriptorId")
                        .HasName("GameEsrbContentDescriptor_PK");

                    b.HasIndex("EsrbContentDescriptorId");

                    b.ToTable("GameEsrbContentDescriptor");
                });

            modelBuilder.Entity("Team6CVGS.Models.GamePerspective", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<string>("EnglishPerspectiveName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nchar(15)")
                        .IsFixedLength(true);

                    b.Property<string>("FrenchPerspectiveName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nchar(15)")
                        .IsFixedLength(true);

                    b.HasKey("Code")
                        .HasName("GamePerspective_PK");

                    b.ToTable("GamePerspective");
                });

            modelBuilder.Entity("Team6CVGS.Models.GameStatus", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<string>("EnglishCategory")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("FrenchCategory")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Code")
                        .HasName("GameStatus_PK");

                    b.ToTable("GameStatus");
                });

            modelBuilder.Entity("Team6CVGS.Models.GameSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnglishCategory")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FrenchCategory")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("GameCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GameSubCategory");
                });

            modelBuilder.Entity("Team6CVGS.Models.Inventory", b =>
                {
                    b.Property<Guid>("ProductGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LocationGln")
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength(true);

                    b.Property<short>("NewOnHand")
                        .HasColumnType("smallint");

                    b.Property<short>("NewOnOrder")
                        .HasColumnType("smallint");

                    b.Property<short>("UsedOnHand")
                        .HasColumnType("smallint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasDefaultValueSql("('Unknown')");

                    b.HasKey("ProductGuid", "LocationGln")
                        .HasName("Inventory_PK");

                    b.HasIndex("LocationGln");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("Team6CVGS.Models.Location", b =>
                {
                    b.Property<string>("Gln")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .HasDefaultValueSql("('?')")
                        .IsFixedLength(true);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength(true);

                    b.Property<string>("Fax")
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)");

                    b.Property<string>("LocalPhone")
                        .IsRequired()
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)");

                    b.Property<string>("LocationTypeCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProvinceCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("TollFreePhone")
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasDefaultValueSql("('Unknown')");

                    b.HasKey("Gln")
                        .HasName("Location_PK");

                    b.HasIndex("CountryCode");

                    b.HasIndex("LocationTypeCode");

                    b.HasIndex("ProvinceCode");

                    b.HasIndex("RegionId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Team6CVGS.Models.LocationType", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("FrenchName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.HasKey("Code")
                        .HasName("LocationType_PK");

                    b.ToTable("LocationType");
                });

            modelBuilder.Entity("Team6CVGS.Models.MigrationHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContextKey")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<byte[]>("Model")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("MigrationId", "ContextKey")
                        .HasName("PK_dbo.__MigrationHistory");

                    b.ToTable("__MigrationHistory");
                });

            modelBuilder.Entity("Team6CVGS.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength(true);

                    b.Property<string>("Email")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Extension")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Fax")
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LandLine")
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProvinceCode")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasDefaultValueSql("('Unknown')");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode");

                    b.HasIndex("ProvinceCode");

                    b.HasIndex(new[] { "Surname", "GivenName" }, "Person_SurnameGivenName_IX");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Team6CVGS.Models.Platform", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FrenchName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Code")
                        .HasName("Platform_PK");

                    b.ToTable("Platform");
                });

            modelBuilder.Entity("Team6CVGS.Models.Population", b =>
                {
                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<bool>("Allocated")
                        .HasColumnType("bit");

                    b.Property<string>("Amex")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength(true);

                    b.Property<string>("BankCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength(true);

                    b.Property<string>("BranchAddress")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength(true);

                    b.Property<string>("Email")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Extension")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Fax")
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)");

                    b.Property<string>("FinancialInstitution")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Hin")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("LandLine")
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)");

                    b.Property<string>("MasterCard")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength(true);

                    b.Property<string>("Mobile")
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)");

                    b.Property<string>("PopulationClassificationCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProvinceCode")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Sin")
                        .HasMaxLength(9)
                        .HasColumnType("nchar(9)")
                        .IsFixedLength(true);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransitNumber")
                        .HasMaxLength(5)
                        .HasColumnType("nchar(5)")
                        .IsFixedLength(true);

                    b.Property<string>("Visa")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength(true);

                    b.HasKey("Guid")
                        .HasName("Population_PK")
                        .IsClustered(false);

                    b.HasIndex("CountryCode");

                    b.HasIndex("PopulationClassificationCode");

                    b.HasIndex("ProvinceCode");

                    b.HasIndex(new[] { "City" }, "Population_City_IX");

                    b.HasIndex(new[] { "Surname", "GivenName" }, "Population_SurnameGivenName_IX");

                    b.ToTable("Population");
                });

            modelBuilder.Entity("Team6CVGS.Models.PopulationClassification", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Code")
                        .HasName("PopulationClassification_PK");

                    b.ToTable("PopulationClassification");
                });

            modelBuilder.Entity("Team6CVGS.Models.Product", b =>
                {
                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("AcceptUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("DeveloperId")
                        .HasColumnType("int");

                    b.Property<string>("GameCompanyPartNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("GameGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Gtin")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nchar(14)")
                        .IsFixedLength(true);

                    b.Property<decimal>("Msrp")
                        .HasColumnType("money");

                    b.Property<string>("NewSku")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(9)
                        .HasColumnType("nchar(9)")
                        .HasDefaultValueSql("('?')")
                        .IsFixedLength(true);

                    b.Property<decimal>("NewStorePrice")
                        .HasColumnType("money");

                    b.Property<decimal>("NewWebPrice")
                        .HasColumnType("money");

                    b.Property<string>("PlatformCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("UsedCustomerCredit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UsedSku")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(9)
                        .HasColumnType("nchar(9)")
                        .HasDefaultValueSql("('?')")
                        .IsFixedLength(true);

                    b.Property<decimal?>("UsedStorePrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("UsedWebPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasDefaultValueSql("('Unknown')");

                    b.HasKey("Guid")
                        .HasName("Product_PK")
                        .IsClustered(false);

                    b.HasIndex("DeveloperId");

                    b.HasIndex("GameGuid");

                    b.HasIndex("PlatformCode");

                    b.HasIndex("PublisherId");

                    b.HasIndex(new[] { "Gtin" }, "Product_Gtin_IX")
                        .IsClustered();

                    b.HasIndex(new[] { "Gtin" }, "Product_Gtin_Unique")
                        .IsUnique();

                    b.HasIndex(new[] { "NewSku" }, "Product_NewSku_IX");

                    b.HasIndex(new[] { "NewSku" }, "Product_NewSku_Unique")
                        .IsUnique();

                    b.HasIndex(new[] { "UsedSku" }, "Product_UsedSku_IX");

                    b.HasIndex(new[] { "UsedSku" }, "Product_UsedSku_Unique")
                        .IsUnique();

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Team6CVGS.Models.Province", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength(true);

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("FederalTax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("FederalTaxAcronym")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("FrenchName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("ProvincialTax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ProvincialTaxAcronym")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<bool?>("PstOnGst")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Code")
                        .HasName("ProvinceLookup_PK");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("Team6CVGS.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FrenchName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Team6CVGS.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("reviewId");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit")
                        .HasColumnName("approved");

                    b.Property<Guid>("GameGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("gameGuid");

                    b.Property<string>("ReviewContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reviewContent");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("date")
                        .HasColumnName("reviewDate");

                    b.Property<int>("ReviewRaiting")
                        .HasColumnType("int")
                        .HasColumnName("reviewRaiting");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("ReviewId");

                    b.HasIndex("GameGuid");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("Team6CVGS.Models.Sku", b =>
                {
                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.ToTable("Sku");
                });

            modelBuilder.Entity("Team6CVGS.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength(true);

                    b.Property<string>("Fax")
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)");

                    b.Property<string>("LocalPhone")
                        .IsRequired()
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProvinceCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("TollFreePhone")
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasDefaultValueSql("('Unknown')");

                    b.Property<string>("WebSite")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode");

                    b.HasIndex("ProvinceCode");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("Team6CVGS.Models.SupplierContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Extension")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LandLine")
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)");

                    b.Property<string>("Note")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasDefaultValueSql("('Unknown')");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierContact");
                });

            modelBuilder.Entity("Team6CVGS.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("Team6CVGS.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Team6CVGS.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("Team6CVGS.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Team6CVGS.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("Team6CVGS.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Team6CVGS.Models.AspNetUserRole", b =>
                {
                    b.HasOne("Team6CVGS.Models.AspNetRole", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team6CVGS.Models.AspNetUser", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Team6CVGS.Models.AspNetUserToken", b =>
                {
                    b.HasOne("Team6CVGS.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Team6CVGS.Models.Employee", b =>
                {
                    b.HasOne("Team6CVGS.Models.Department", "DepartmentCodeNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentCode")
                        .HasConstraintName("Employee_Department_FK")
                        .IsRequired();

                    b.HasOne("Team6CVGS.Models.Location", "GlnNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("Gln")
                        .HasConstraintName("Employee_Location_FK")
                        .IsRequired();

                    b.HasOne("Team6CVGS.Models.EmployeePayCategory", "PayCategoryCodeNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("PayCategoryCode")
                        .HasConstraintName("Employee_EmployeePayCategory_FK")
                        .IsRequired();

                    b.HasOne("Team6CVGS.Models.Person", "Person")
                        .WithOne("Employee")
                        .HasForeignKey("Team6CVGS.Models.Employee", "PersonId")
                        .HasConstraintName("Employee_Person_FK")
                        .IsRequired();

                    b.HasOne("Team6CVGS.Models.EmployeePosition", "PositionCodeNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("PositionCode")
                        .HasConstraintName("Employee_EmployeePosition_FK")
                        .IsRequired();

                    b.Navigation("DepartmentCodeNavigation");

                    b.Navigation("GlnNavigation");

                    b.Navigation("PayCategoryCodeNavigation");

                    b.Navigation("Person");

                    b.Navigation("PositionCodeNavigation");
                });

            modelBuilder.Entity("Team6CVGS.Models.Game", b =>
                {
                    b.HasOne("Team6CVGS.Models.EsrbRating", "EsrbRatingCodeNavigation")
                        .WithMany("Games")
                        .HasForeignKey("EsrbRatingCode")
                        .HasConstraintName("Game_EsrbRating_FK")
                        .IsRequired();

                    b.HasOne("Team6CVGS.Models.GameCategory", "GameCategory")
                        .WithMany("Games")
                        .HasForeignKey("GameCategoryId")
                        .HasConstraintName("Game_GameCategory_FK")
                        .IsRequired();

                    b.HasOne("Team6CVGS.Models.GamePerspective", "GamePerspectiveCodeNavigation")
                        .WithMany("Games")
                        .HasForeignKey("GamePerspectiveCode")
                        .HasConstraintName("Game_GamePerspective_FK");

                    b.HasOne("Team6CVGS.Models.GameStatus", "GameStatusCodeNavigation")
                        .WithMany("Games")
                        .HasForeignKey("GameStatusCode")
                        .HasConstraintName("Game_GameStatus_FK")
                        .IsRequired();

                    b.HasOne("Team6CVGS.Models.GameSubCategory", "GameSubCategory")
                        .WithMany("Games")
                        .HasForeignKey("GameSubCategoryId")
                        .HasConstraintName("Game_GameSubCategory_FK");

                    b.Navigation("EsrbRatingCodeNavigation");

                    b.Navigation("GameCategory");

                    b.Navigation("GamePerspectiveCodeNavigation");

                    b.Navigation("GameStatusCodeNavigation");

                    b.Navigation("GameSubCategory");
                });

            modelBuilder.Entity("Team6CVGS.Models.GameEsrbContentDescriptor", b =>
                {
                    b.HasOne("Team6CVGS.Models.EsrbContentDescriptor", "EsrbContentDescriptor")
                        .WithMany("GameEsrbContentDescriptors")
                        .HasForeignKey("EsrbContentDescriptorId")
                        .HasConstraintName("GameEsrbContentDescriptor_EsrbContentDescriptor_FK")
                        .IsRequired();

                    b.HasOne("Team6CVGS.Models.Game", "GameGu")
                        .WithMany("GameEsrbContentDescriptors")
                        .HasForeignKey("GameGuid")
                        .HasConstraintName("GameEsrbContentDescriptor_Game_FK")
                        .IsRequired();

                    b.Navigation("EsrbContentDescriptor");

                    b.Navigation("GameGu");
                });

            modelBuilder.Entity("Team6CVGS.Models.Inventory", b =>
                {
                    b.HasOne("Team6CVGS.Models.Location", "LocationGlnNavigation")
                        .WithMany("Inventories")
                        .HasForeignKey("LocationGln")
                        .HasConstraintName("Inventory_Location_FK")
                        .IsRequired();

                    b.HasOne("Team6CVGS.Models.Product", "ProductGu")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductGuid")
                        .HasConstraintName("Inventory_Product_FK")
                        .IsRequired();

                    b.Navigation("LocationGlnNavigation");

                    b.Navigation("ProductGu");
                });

            modelBuilder.Entity("Team6CVGS.Models.Location", b =>
                {
                    b.HasOne("Team6CVGS.Models.Country", "CountryCodeNavigation")
                        .WithMany("Locations")
                        .HasForeignKey("CountryCode")
                        .HasConstraintName("Location_Country_FK")
                        .IsRequired();

                    b.HasOne("Team6CVGS.Models.LocationType", "LocationTypeCodeNavigation")
                        .WithMany("Locations")
                        .HasForeignKey("LocationTypeCode")
                        .HasConstraintName("Location_LocationType_FK")
                        .IsRequired();

                    b.HasOne("Team6CVGS.Models.Province", "ProvinceCodeNavigation")
                        .WithMany("Locations")
                        .HasForeignKey("ProvinceCode")
                        .HasConstraintName("Location_Province_FK")
                        .IsRequired();

                    b.HasOne("Team6CVGS.Models.Region", "Region")
                        .WithMany("Locations")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("Location_Region_FK")
                        .IsRequired();

                    b.Navigation("CountryCodeNavigation");

                    b.Navigation("LocationTypeCodeNavigation");

                    b.Navigation("ProvinceCodeNavigation");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Team6CVGS.Models.Person", b =>
                {
                    b.HasOne("Team6CVGS.Models.Country", "CountryCodeNavigation")
                        .WithMany("People")
                        .HasForeignKey("CountryCode")
                        .HasConstraintName("Person_Country_FK")
                        .IsRequired();

                    b.HasOne("Team6CVGS.Models.Province", "ProvinceCodeNavigation")
                        .WithMany("People")
                        .HasForeignKey("ProvinceCode")
                        .HasConstraintName("Person_Province_FK");

                    b.Navigation("CountryCodeNavigation");

                    b.Navigation("ProvinceCodeNavigation");
                });

            modelBuilder.Entity("Team6CVGS.Models.Population", b =>
                {
                    b.HasOne("Team6CVGS.Models.Country", "CountryCodeNavigation")
                        .WithMany("Populations")
                        .HasForeignKey("CountryCode")
                        .HasConstraintName("Population_Country_FK")
                        .IsRequired();

                    b.HasOne("Team6CVGS.Models.PopulationClassification", "PopulationClassificationCodeNavigation")
                        .WithMany("Populations")
                        .HasForeignKey("PopulationClassificationCode")
                        .HasConstraintName("Population_PopulationClassification_FK")
                        .IsRequired();

                    b.HasOne("Team6CVGS.Models.Province", "ProvinceCodeNavigation")
                        .WithMany("Populations")
                        .HasForeignKey("ProvinceCode")
                        .HasConstraintName("Population_Province_FK");

                    b.Navigation("CountryCodeNavigation");

                    b.Navigation("PopulationClassificationCodeNavigation");

                    b.Navigation("ProvinceCodeNavigation");
                });

            modelBuilder.Entity("Team6CVGS.Models.Product", b =>
                {
                    b.HasOne("Team6CVGS.Models.GameCompany", "Developer")
                        .WithMany("ProductDevelopers")
                        .HasForeignKey("DeveloperId")
                        .HasConstraintName("Product_GameCompany_Developer_FK")
                        .IsRequired();

                    b.HasOne("Team6CVGS.Models.Game", "GameGu")
                        .WithMany("Products")
                        .HasForeignKey("GameGuid")
                        .HasConstraintName("Product_Game_FK")
                        .IsRequired();

                    b.HasOne("Team6CVGS.Models.Platform", "PlatformCodeNavigation")
                        .WithMany("Products")
                        .HasForeignKey("PlatformCode")
                        .HasConstraintName("Product_Platform_FK")
                        .IsRequired();

                    b.HasOne("Team6CVGS.Models.GameCompany", "Publisher")
                        .WithMany("ProductPublishers")
                        .HasForeignKey("PublisherId")
                        .HasConstraintName("Product_GameCompany_Publisher_FK")
                        .IsRequired();

                    b.Navigation("Developer");

                    b.Navigation("GameGu");

                    b.Navigation("PlatformCodeNavigation");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Team6CVGS.Models.Review", b =>
                {
                    b.HasOne("Team6CVGS.Models.Game", "GameGu")
                        .WithMany("Reviews")
                        .HasForeignKey("GameGuid")
                        .HasConstraintName("FK_Review_Game")
                        .IsRequired();

                    b.HasOne("Team6CVGS.Models.Person", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Review_Person")
                        .IsRequired();

                    b.Navigation("GameGu");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Team6CVGS.Models.Supplier", b =>
                {
                    b.HasOne("Team6CVGS.Models.Country", "CountryCodeNavigation")
                        .WithMany("Suppliers")
                        .HasForeignKey("CountryCode")
                        .HasConstraintName("Supplier_Country_FK")
                        .IsRequired();

                    b.HasOne("Team6CVGS.Models.Province", "ProvinceCodeNavigation")
                        .WithMany("Suppliers")
                        .HasForeignKey("ProvinceCode")
                        .HasConstraintName("Supplier_Province_FK")
                        .IsRequired();

                    b.Navigation("CountryCodeNavigation");

                    b.Navigation("ProvinceCodeNavigation");
                });

            modelBuilder.Entity("Team6CVGS.Models.SupplierContact", b =>
                {
                    b.HasOne("Team6CVGS.Models.Supplier", "Supplier")
                        .WithMany("SupplierContacts")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("SupplierContact_Supplier_FK")
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Team6CVGS.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");

                    b.Navigation("AspNetUserRoles");
                });

            modelBuilder.Entity("Team6CVGS.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserRoles");

                    b.Navigation("AspNetUserTokens");
                });

            modelBuilder.Entity("Team6CVGS.Models.Country", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("People");

                    b.Navigation("Populations");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("Team6CVGS.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Team6CVGS.Models.EmployeePayCategory", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Team6CVGS.Models.EmployeePosition", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Team6CVGS.Models.EsrbContentDescriptor", b =>
                {
                    b.Navigation("GameEsrbContentDescriptors");
                });

            modelBuilder.Entity("Team6CVGS.Models.EsrbRating", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Team6CVGS.Models.Game", b =>
                {
                    b.Navigation("GameEsrbContentDescriptors");

                    b.Navigation("Products");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Team6CVGS.Models.GameCategory", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Team6CVGS.Models.GameCompany", b =>
                {
                    b.Navigation("ProductDevelopers");

                    b.Navigation("ProductPublishers");
                });

            modelBuilder.Entity("Team6CVGS.Models.GamePerspective", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Team6CVGS.Models.GameStatus", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Team6CVGS.Models.GameSubCategory", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Team6CVGS.Models.Location", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("Team6CVGS.Models.LocationType", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Team6CVGS.Models.Person", b =>
                {
                    b.Navigation("Employee");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Team6CVGS.Models.Platform", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Team6CVGS.Models.PopulationClassification", b =>
                {
                    b.Navigation("Populations");
                });

            modelBuilder.Entity("Team6CVGS.Models.Product", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("Team6CVGS.Models.Province", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("People");

                    b.Navigation("Populations");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("Team6CVGS.Models.Region", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Team6CVGS.Models.Supplier", b =>
                {
                    b.Navigation("SupplierContacts");
                });
#pragma warning restore 612, 618
        }
    }
}
